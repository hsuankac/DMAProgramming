
M2P_UART2_SCRATCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000024c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000410  08000418  00010418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000410  08000410  00010418  2**0
                  CONTENTS
  4 .ARM          00000000  08000410  08000410  00010418  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000410  08000418  00010418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000410  08000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000414  08000414  00010414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000418  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000418  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010418  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f67  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000384  00000000  00000000  000113af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00011738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000080  00000000  00000000  000117f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ede9  00000000  00000000  00011870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000114d  00000000  00000000  00030659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0719  00000000  00000000  000317a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1ebf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000190  00000000  00000000  000f1f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003f8 	.word	0x080003f8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080003f8 	.word	0x080003f8

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4907      	ldr	r1, [pc, #28]	; (800023c <__NVIC_EnableIRQ+0x38>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100

08000240 <main>:
void uart2_init(void);
void dma1_init(void);


int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	button_init();
 8000244:	f000 f806 	bl	8000254 <button_init>
	uart2_init();
 8000248:	f000 f848 	bl	80002dc <uart2_init>
	dma1_init();
 800024c:	f000 f84d 	bl	80002ea <dma1_init>

	while(1);
 8000250:	e7fe      	b.n	8000250 <main+0x10>
	...

08000254 <button_init>:
	return 0;

}

void button_init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
	// Button is connected to PC 13
	GPIO_TypeDef *pGPIOC = GPIOC;
 800025a:	4b1c      	ldr	r3, [pc, #112]	; (80002cc <button_init+0x78>)
 800025c:	60fb      	str	r3, [r7, #12]
	RCC_TypeDef *pRCC = RCC;
 800025e:	4b1c      	ldr	r3, [pc, #112]	; (80002d0 <button_init+0x7c>)
 8000260:	60bb      	str	r3, [r7, #8]
	EXTI_TypeDef *pEXTI = EXTI;
 8000262:	4b1c      	ldr	r3, [pc, #112]	; (80002d4 <button_init+0x80>)
 8000264:	607b      	str	r3, [r7, #4]
	SYSCFG_TypeDef *pSYSCFG = SYSCFG;
 8000266:	4b1c      	ldr	r3, [pc, #112]	; (80002d8 <button_init+0x84>)
 8000268:	603b      	str	r3, [r7, #0]

	// Enable the peripheral clock for the GPIOC peripheral
	pRCC->AHB1ENR |= (1 << 2);
 800026a:	68bb      	ldr	r3, [r7, #8]
 800026c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026e:	f043 0204 	orr.w	r2, r3, #4
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	631a      	str	r2, [r3, #48]	; 0x30

	// Keep the GPIO pin in input modes
	pGPIOC->MODER &= ~(0x3 << 26);
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	601a      	str	r2, [r3, #0]

	// Enable the interrupt over that GPIO pin
	pEXTI->IMR |= (1 << 13);
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	601a      	str	r2, [r3, #0]

	// Enable the peripheral clock for the SYSCFG peripheral
	pRCC->APB2ENR |= (1 << 14);
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000292:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	645a      	str	r2, [r3, #68]	; 0x44

	// Configuring the SYSCFG control register
	pSYSCFG->EXTICR[3] &= ~(0xf << 4); //clearing
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	695b      	ldr	r3, [r3, #20]
 800029e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	615a      	str	r2, [r3, #20]
	pSYSCFG->EXTICR[3] |= (0x2 << 4); // setting
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	f043 0220 	orr.w	r2, r3, #32
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	615a      	str	r2, [r3, #20]

	// Configure the edge detection on that GPIO pin
	pEXTI->FTSR |= (1 << 13);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	68db      	ldr	r3, [r3, #12]
 80002b6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	60da      	str	r2, [r3, #12]

	// Enable the IRQ related to that GPIO pin in NVIC of the processor
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002be:	2028      	movs	r0, #40	; 0x28
 80002c0:	f7ff ffa0 	bl	8000204 <__NVIC_EnableIRQ>
}
 80002c4:	bf00      	nop
 80002c6:	3710      	adds	r7, #16
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40020800 	.word	0x40020800
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40013c00 	.word	0x40013c00
 80002d8:	40013800 	.word	0x40013800

080002dc <uart2_init>:


void uart2_init(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
	// Enable the peripheral clock for the UART2 peripheral



}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr

080002ea <dma1_init>:


void dma1_init(void)
{
 80002ea:	b480      	push	{r7}
 80002ec:	af00      	add	r7, sp, #0

}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr

080002f8 <clear_exti_pending_bit>:

void clear_exti_pending_bit(void);


void clear_exti_pending_bit(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
	EXTI_TypeDef *pEXTI = EXTI;
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <clear_exti_pending_bit+0x30>)
 8000300:	607b      	str	r3, [r7, #4]

	// Clear the pending bit
	if(pEXTI->PR & (1 << 13))
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800030a:	2b00      	cmp	r3, #0
 800030c:	d005      	beq.n	800031a <clear_exti_pending_bit+0x22>
	{
		pEXTI->PR |= (1 << 13);
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	615a      	str	r2, [r3, #20]
	}

}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	40013c00 	.word	0x40013c00

0800032c <EXTI15_10_IRQHandler>:

// IRQ handler for the button interrupt
void EXTI15_10_IRQHandler(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	clear_exti_pending_bit();
 8000330:	f7ff ffe2 	bl	80002f8 <clear_exti_pending_bit>
}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}

08000338 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <SystemInit+0x20>)
 800033e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000342:	4a05      	ldr	r2, [pc, #20]	; (8000358 <SystemInit+0x20>)
 8000344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800035c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000394 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000360:	480d      	ldr	r0, [pc, #52]	; (8000398 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000362:	490e      	ldr	r1, [pc, #56]	; (800039c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000364:	4a0e      	ldr	r2, [pc, #56]	; (80003a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000368:	e002      	b.n	8000370 <LoopCopyDataInit>

0800036a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800036c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036e:	3304      	adds	r3, #4

08000370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000374:	d3f9      	bcc.n	800036a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000376:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000378:	4c0b      	ldr	r4, [pc, #44]	; (80003a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800037c:	e001      	b.n	8000382 <LoopFillZerobss>

0800037e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000380:	3204      	adds	r2, #4

08000382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000384:	d3fb      	bcc.n	800037e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000386:	f7ff ffd7 	bl	8000338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800038a:	f000 f811 	bl	80003b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800038e:	f7ff ff57 	bl	8000240 <main>
  bx  lr    
 8000392:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a0:	08000418 	.word	0x08000418
  ldr r2, =_sbss
 80003a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a8:	2000001c 	.word	0x2000001c

080003ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC_IRQHandler>
	...

080003b0 <__libc_init_array>:
 80003b0:	b570      	push	{r4, r5, r6, lr}
 80003b2:	4d0d      	ldr	r5, [pc, #52]	; (80003e8 <__libc_init_array+0x38>)
 80003b4:	4c0d      	ldr	r4, [pc, #52]	; (80003ec <__libc_init_array+0x3c>)
 80003b6:	1b64      	subs	r4, r4, r5
 80003b8:	10a4      	asrs	r4, r4, #2
 80003ba:	2600      	movs	r6, #0
 80003bc:	42a6      	cmp	r6, r4
 80003be:	d109      	bne.n	80003d4 <__libc_init_array+0x24>
 80003c0:	4d0b      	ldr	r5, [pc, #44]	; (80003f0 <__libc_init_array+0x40>)
 80003c2:	4c0c      	ldr	r4, [pc, #48]	; (80003f4 <__libc_init_array+0x44>)
 80003c4:	f000 f818 	bl	80003f8 <_init>
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	10a4      	asrs	r4, r4, #2
 80003cc:	2600      	movs	r6, #0
 80003ce:	42a6      	cmp	r6, r4
 80003d0:	d105      	bne.n	80003de <__libc_init_array+0x2e>
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d8:	4798      	blx	r3
 80003da:	3601      	adds	r6, #1
 80003dc:	e7ee      	b.n	80003bc <__libc_init_array+0xc>
 80003de:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e2:	4798      	blx	r3
 80003e4:	3601      	adds	r6, #1
 80003e6:	e7f2      	b.n	80003ce <__libc_init_array+0x1e>
 80003e8:	08000410 	.word	0x08000410
 80003ec:	08000410 	.word	0x08000410
 80003f0:	08000410 	.word	0x08000410
 80003f4:	08000414 	.word	0x08000414

080003f8 <_init>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr

08000404 <_fini>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr
